plugins {
    id 'java'
    id("xyz.jpenilla.run-paper") version "2.3.1"
    id("com.gradleup.shadow") version "9.1.0"
}

group = 'me.candidate.miniproject'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21.8-R0.1-SNAPSHOT")

    // Cloud Command Framework
    implementation 'org.incendo:cloud-paper:2.0.0-beta.10'
    implementation 'org.incendo:cloud-annotations:2.0.0'

    // Triumph GUI
    implementation ("dev.triumphteam:triumph-gui:3.1.11") {
        exclude group: "net.kyori"
    }

    implementation ('org.spongepowered:configurate-yaml:4.1.0') {
        exclude group: "com.google.gson"
    }

    implementation ("com.zaxxer:HikariCP:7.0.2") {
        exclude group: "org.slf4j"
    }
}

tasks {
    runServer {
        minecraftVersion("1.21")

        // Automatically accept Mojang EULA
        jvmArgs("-Dcom.mojang.eula.agree=true")
    }

    // Let's re-locate libraries to avoid conflicts with other plugins
    shadowJar {

        // Cloud Command Framework
        relocate("org.incendo.cloud", "me.candidate.miniproject.libs.cloud")
        relocate("io.leangen.geantyref", "me.candidate.miniproject.libs.geantyref")

        // cloud-paper dependencies
        relocate("xyz.jpenilla.reflectionremapper", "me.candidate.miniproject.libs.reflectionremapper")
        relocate("net.fabricmc.mappingio", "me.candidate.miniproject.libs.mappingio")

        relocate("dev.triumphteam.gui", "me.candidate.miniproject.libs.triumphgui")

        relocate("org.spongepowered.configurate", "me.candidate.miniproject.libs.configurate")

        relocate("com.zaxxer", "me.candidate.miniproject.libs.hikari")

        relocate("org.yaml.snakeyaml", "me.candidate.miniproject.libs.snakeyaml")
    }

    // The build task needs to depend on shadowJar so that we get a jar with dependencies included
    build {
        dependsOn(shadowJar)
    }
}

java {
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.release.set(21)
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}